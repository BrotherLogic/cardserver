// Code generated by protoc-gen-go.
// source: card.proto
// DO NOT EDIT!

/*
Package card is a generated protocol buffer package.

It is generated from these files:
	card.proto

It has these top-level messages:
	Empty
	Card
	CardList
*/
package card

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The action to take along with the card
type Card_Action int32

const (
	Card_NONE     Card_Action = 0
	Card_VISITURL Card_Action = 1
)

var Card_Action_name = map[int32]string{
	0: "NONE",
	1: "VISITURL",
}
var Card_Action_value = map[string]int32{
	"NONE":     0,
	"VISITURL": 1,
}

func (x Card_Action) String() string {
	return proto.EnumName(Card_Action_name, int32(x))
}
func (Card_Action) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Card struct {
	// A web link to the image to display
	Image string `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	// The text to display with the card
	Text   string      `protobuf:"bytes,2,opt,name=text" json:"text,omitempty"`
	Action Card_Action `protobuf:"varint,3,opt,name=action,enum=card.Card_Action" json:"action,omitempty"`
	// The date the card was created
	CreatedDate int64 `protobuf:"varint,4,opt,name=created_date,json=createdDate" json:"created_date,omitempty"`
	// The date from which the card should be applied
	ApplicationDate int64 `protobuf:"varint,5,opt,name=application_date,json=applicationDate" json:"application_date,omitempty"`
	// The date from which the card can be removed
	ExpirationDate int64 `protobuf:"varint,6,opt,name=expiration_date,json=expirationDate" json:"expiration_date,omitempty"`
	// The chosen priority of the card
	Priority int32 `protobuf:"varint,7,opt,name=priority" json:"priority,omitempty"`
}

func (m *Card) Reset()                    { *m = Card{} }
func (m *Card) String() string            { return proto.CompactTextString(m) }
func (*Card) ProtoMessage()               {}
func (*Card) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type CardList struct {
	Cards []*Card `protobuf:"bytes,1,rep,name=cards" json:"cards,omitempty"`
}

func (m *CardList) Reset()                    { *m = CardList{} }
func (m *CardList) String() string            { return proto.CompactTextString(m) }
func (*CardList) ProtoMessage()               {}
func (*CardList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CardList) GetCards() []*Card {
	if m != nil {
		return m.Cards
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "card.Empty")
	proto.RegisterType((*Card)(nil), "card.Card")
	proto.RegisterType((*CardList)(nil), "card.CardList")
	proto.RegisterEnum("card.Card_Action", Card_Action_name, Card_Action_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for CardService service

type CardServiceClient interface {
	// Gets the cards currently held in the system
	GetCards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardList, error)
	// Adds the cards in the list to the system - returns the resulting card list
	AddCards(ctx context.Context, in *CardList, opts ...grpc.CallOption) (*CardList, error)
}

type cardServiceClient struct {
	cc *grpc.ClientConn
}

func NewCardServiceClient(cc *grpc.ClientConn) CardServiceClient {
	return &cardServiceClient{cc}
}

func (c *cardServiceClient) GetCards(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CardList, error) {
	out := new(CardList)
	err := grpc.Invoke(ctx, "/card.CardService/GetCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cardServiceClient) AddCards(ctx context.Context, in *CardList, opts ...grpc.CallOption) (*CardList, error) {
	out := new(CardList)
	err := grpc.Invoke(ctx, "/card.CardService/AddCards", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CardService service

type CardServiceServer interface {
	// Gets the cards currently held in the system
	GetCards(context.Context, *Empty) (*CardList, error)
	// Adds the cards in the list to the system - returns the resulting card list
	AddCards(context.Context, *CardList) (*CardList, error)
}

func RegisterCardServiceServer(s *grpc.Server, srv CardServiceServer) {
	s.RegisterService(&_CardService_serviceDesc, srv)
}

func _CardService_GetCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).GetCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardService/GetCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).GetCards(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CardService_AddCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CardServiceServer).AddCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/card.CardService/AddCards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CardServiceServer).AddCards(ctx, req.(*CardList))
	}
	return interceptor(ctx, in, info, handler)
}

var _CardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "card.CardService",
	HandlerType: (*CardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCards",
			Handler:    _CardService_GetCards_Handler,
		},
		{
			MethodName: "AddCards",
			Handler:    _CardService_AddCards_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 303 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x64, 0x91, 0x4d, 0x4b, 0xfb, 0x40,
	0x10, 0xc6, 0xdb, 0xe6, 0xa5, 0xf9, 0x4f, 0x4a, 0x9a, 0xff, 0xe0, 0x21, 0xf4, 0x14, 0x73, 0xb1,
	0x82, 0xe4, 0x10, 0x3f, 0x41, 0xd1, 0x22, 0x85, 0x52, 0x61, 0xab, 0x5e, 0x65, 0x4d, 0x56, 0x59,
	0xb0, 0x66, 0xd9, 0x2c, 0xd2, 0x7e, 0x0b, 0x3f, 0xb2, 0xfb, 0x52, 0x4c, 0xd1, 0xcb, 0xb2, 0xf3,
	0xcc, 0x6f, 0x9e, 0xe4, 0x99, 0x05, 0xa8, 0xa9, 0x6c, 0x4a, 0x21, 0x5b, 0xd5, 0xa2, 0x6f, 0xee,
	0xc5, 0x18, 0x82, 0xe5, 0x4e, 0xa8, 0x43, 0xf1, 0x35, 0x02, 0xff, 0x46, 0x2b, 0x78, 0x06, 0x01,
	0xdf, 0xd1, 0x37, 0x96, 0x0d, 0xf3, 0xe1, 0xfc, 0x1f, 0x71, 0x05, 0x22, 0xf8, 0x8a, 0xed, 0x55,
	0x36, 0xb2, 0xa2, 0xbd, 0xe3, 0x25, 0x84, 0xb4, 0x56, 0xbc, 0xfd, 0xc8, 0x3c, 0xad, 0x26, 0xd5,
	0xff, 0xd2, 0xda, 0x1b, 0x97, 0x72, 0x61, 0x1b, 0xe4, 0x08, 0xe0, 0x39, 0x4c, 0x6a, 0xc9, 0xa8,
	0x62, 0xcd, 0x73, 0xa3, 0xcf, 0xcc, 0xd7, 0x03, 0x1e, 0x89, 0x8f, 0xda, 0xad, 0x3e, 0xb4, 0x5b,
	0x4a, 0x85, 0x78, 0xe7, 0x35, 0x35, 0x13, 0x0e, 0x0b, 0x2c, 0x36, 0x3d, 0xd1, 0x2d, 0x7a, 0x01,
	0x53, 0xb6, 0x17, 0x5c, 0x9e, 0x90, 0xa1, 0x25, 0x93, 0x5e, 0xb6, 0xe0, 0x0c, 0x22, 0x21, 0x79,
	0x2b, 0xb9, 0x3a, 0x64, 0x63, 0x4d, 0x04, 0xe4, 0xa7, 0x2e, 0x72, 0x08, 0xdd, 0x4f, 0x62, 0x04,
	0xfe, 0xe6, 0x7e, 0xb3, 0x4c, 0x07, 0x38, 0x81, 0xe8, 0x69, 0xb5, 0x5d, 0x3d, 0x3c, 0x92, 0x75,
	0x3a, 0x2c, 0xae, 0x20, 0x32, 0x59, 0xd6, 0xbc, 0x53, 0x98, 0x43, 0x60, 0xc2, 0x75, 0x7a, 0x2b,
	0xde, 0x3c, 0xae, 0xa0, 0x8f, 0x4a, 0x5c, 0xa3, 0x7a, 0x85, 0xd8, 0x94, 0x5b, 0x26, 0x3f, 0x79,
	0x6d, 0xe2, 0x44, 0x77, 0x4c, 0x19, 0xa5, 0xc3, 0xd8, 0xd1, 0x76, 0xd1, 0xb3, 0xa4, 0x1f, 0x35,
	0xce, 0xc5, 0x00, 0xf5, 0x77, 0x16, 0x4d, 0xe3, 0xd0, 0x5f, 0xdd, 0xbf, 0xf4, 0x4b, 0x68, 0x9f,
	0xef, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x64, 0x80, 0x55, 0x49, 0xcc, 0x01, 0x00, 0x00,
}
